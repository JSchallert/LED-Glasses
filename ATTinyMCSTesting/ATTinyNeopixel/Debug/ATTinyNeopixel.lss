
ATTinyNeopixel.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000079e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000040  00800060  0000079e  00000832  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000002c  008000a0  008000a0  00000872  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000872  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000008a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  000008e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000c38  00000000  00000000  00000950  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000741  00000000  00000000  00001588  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000068c  00000000  00000000  00001cc9  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000e0  00000000  00000000  00002358  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000469  00000000  00000000  00002438  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000a4b  00000000  00000000  000028a1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000d8  00000000  00000000  000032ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	10 c0       	rjmp	.+32     	; 0x22 <__ctors_end>
   2:	2a c0       	rjmp	.+84     	; 0x58 <__bad_interrupt>
   4:	29 c0       	rjmp	.+82     	; 0x58 <__bad_interrupt>
   6:	28 c0       	rjmp	.+80     	; 0x58 <__bad_interrupt>
   8:	27 c0       	rjmp	.+78     	; 0x58 <__bad_interrupt>
   a:	26 c0       	rjmp	.+76     	; 0x58 <__bad_interrupt>
   c:	25 c0       	rjmp	.+74     	; 0x58 <__bad_interrupt>
   e:	24 c0       	rjmp	.+72     	; 0x58 <__bad_interrupt>
  10:	23 c0       	rjmp	.+70     	; 0x58 <__bad_interrupt>
  12:	51 c0       	rjmp	.+162    	; 0xb6 <__vector_9>
  14:	21 c0       	rjmp	.+66     	; 0x58 <__bad_interrupt>
  16:	20 c0       	rjmp	.+64     	; 0x58 <__bad_interrupt>
  18:	1f c0       	rjmp	.+62     	; 0x58 <__bad_interrupt>
  1a:	1e c0       	rjmp	.+60     	; 0x58 <__bad_interrupt>
  1c:	1d c0       	rjmp	.+58     	; 0x58 <__bad_interrupt>
  1e:	1c c0       	rjmp	.+56     	; 0x58 <__bad_interrupt>
  20:	1b c0       	rjmp	.+54     	; 0x58 <__bad_interrupt>

00000022 <__ctors_end>:
  22:	11 24       	eor	r1, r1
  24:	1f be       	out	0x3f, r1	; 63
  26:	cf e5       	ldi	r28, 0x5F	; 95
  28:	d2 e0       	ldi	r29, 0x02	; 2
  2a:	de bf       	out	0x3e, r29	; 62
  2c:	cd bf       	out	0x3d, r28	; 61

0000002e <__do_copy_data>:
  2e:	10 e0       	ldi	r17, 0x00	; 0
  30:	a0 e6       	ldi	r26, 0x60	; 96
  32:	b0 e0       	ldi	r27, 0x00	; 0
  34:	ee e9       	ldi	r30, 0x9E	; 158
  36:	f7 e0       	ldi	r31, 0x07	; 7
  38:	02 c0       	rjmp	.+4      	; 0x3e <__SP_H__>
  3a:	05 90       	lpm	r0, Z+
  3c:	0d 92       	st	X+, r0
  3e:	a0 3a       	cpi	r26, 0xA0	; 160
  40:	b1 07       	cpc	r27, r17
  42:	d9 f7       	brne	.-10     	; 0x3a <__do_copy_data+0xc>

00000044 <__do_clear_bss>:
  44:	20 e0       	ldi	r18, 0x00	; 0
  46:	a0 ea       	ldi	r26, 0xA0	; 160
  48:	b0 e0       	ldi	r27, 0x00	; 0
  4a:	01 c0       	rjmp	.+2      	; 0x4e <.do_clear_bss_start>

0000004c <.do_clear_bss_loop>:
  4c:	1d 92       	st	X+, r1

0000004e <.do_clear_bss_start>:
  4e:	ac 3c       	cpi	r26, 0xCC	; 204
  50:	b2 07       	cpc	r27, r18
  52:	e1 f7       	brne	.-8      	; 0x4c <.do_clear_bss_loop>
  54:	70 d0       	rcall	.+224    	; 0x136 <main>
  56:	a1 c3       	rjmp	.+1858   	; 0x79a <_exit>

00000058 <__bad_interrupt>:
  58:	d3 cf       	rjmp	.-90     	; 0x0 <__vectors>

0000005a <ws2812_sendarray>:
void inline ws2812_sendarray_mask(uint8_t *data,uint16_t datlen,uint8_t maskhi)
{
  uint8_t curbyte,ctr,masklo;
  uint8_t sreg_prev;
  
  ws2812_DDRREG |= maskhi; // Enable output
  5a:	ba 9a       	sbi	0x17, 2	; 23
  
  masklo	=~maskhi&ws2812_PORTREG;
  5c:	28 b3       	in	r18, 0x18	; 24
  5e:	2b 7f       	andi	r18, 0xFB	; 251
  maskhi |=        ws2812_PORTREG;
  60:	38 b3       	in	r19, 0x18	; 24
  62:	34 60       	ori	r19, 0x04	; 4
  
  sreg_prev=SREG;
  64:	4f b7       	in	r20, 0x3f	; 63
#ifdef interrupt_is_disabled
  cli();  
  66:	f8 94       	cli
#endif  

  while (datlen--) {
  68:	61 15       	cp	r22, r1
  6a:	71 05       	cpc	r23, r1
  6c:	09 f4       	brne	.+2      	; 0x70 <ws2812_sendarray+0x16>
  6e:	21 c0       	rjmp	.+66     	; 0xb2 <loop299+0x38>
  70:	fc 01       	movw	r30, r24
  72:	68 0f       	add	r22, r24
  74:	79 1f       	adc	r23, r25
    curbyte=*data++;
  76:	81 91       	ld	r24, Z+
    
    asm volatile(
  78:	98 e0       	ldi	r25, 0x08	; 8

0000007a <loop299>:
  7a:	38 bb       	out	0x18, r19	; 24
  7c:	87 ff       	sbrs	r24, 7
  7e:	28 bb       	out	0x18, r18	; 24
  80:	88 0f       	add	r24, r24
  82:	00 00       	nop
  84:	07 f4       	brid	.+0      	; 0x86 <loop299+0xc>
  86:	28 bb       	out	0x18, r18	; 24
  88:	00 00       	nop
  8a:	07 f4       	brid	.+0      	; 0x8c <loop299+0x12>
  8c:	07 f4       	brid	.+0      	; 0x8e <loop299+0x14>
  8e:	07 f4       	brid	.+0      	; 0x90 <loop299+0x16>
  90:	07 f4       	brid	.+0      	; 0x92 <loop299+0x18>
  92:	07 f4       	brid	.+0      	; 0x94 <loop299+0x1a>
  94:	07 f4       	brid	.+0      	; 0x96 <loop299+0x1c>
  96:	07 f4       	brid	.+0      	; 0x98 <loop299+0x1e>
  98:	07 f4       	brid	.+0      	; 0x9a <loop299+0x20>
  9a:	07 f4       	brid	.+0      	; 0x9c <loop299+0x22>
  9c:	07 f4       	brid	.+0      	; 0x9e <loop299+0x24>
  9e:	07 f4       	brid	.+0      	; 0xa0 <loop299+0x26>
  a0:	07 f4       	brid	.+0      	; 0xa2 <loop299+0x28>
  a2:	07 f4       	brid	.+0      	; 0xa4 <loop299+0x2a>
  a4:	07 f4       	brid	.+0      	; 0xa6 <loop299+0x2c>
  a6:	07 f4       	brid	.+0      	; 0xa8 <loop299+0x2e>
  a8:	9a 95       	dec	r25
  aa:	39 f7       	brne	.-50     	; 0x7a <loop299>
  sreg_prev=SREG;
#ifdef interrupt_is_disabled
  cli();  
#endif  

  while (datlen--) {
  ac:	e6 17       	cp	r30, r22
  ae:	f7 07       	cpc	r31, r23
  b0:	11 f7       	brne	.-60     	; 0x76 <ws2812_sendarray+0x1c>
    :	"=&d" (ctr)
    :	"r" (curbyte), "I" (_SFR_IO_ADDR(ws2812_PORTREG)), "r" (maskhi), "r" (masklo)
    );
  }
  
  SREG=sreg_prev;
  b2:	4f bf       	out	0x3f, r20	; 63
  b4:	08 95       	ret

000000b6 <__vector_9>:

void timer0_Init() {
	// Clear timer0 counter
	TCNT0 = 130;  //255-125=130
	TIMSK0 = (1 << OCIE0A);		// Enable interrupt for timer0 overflow
	TCCR0B = (1<<CS00)|(1<<CS01);	// Prescaler to 64, start timer
  b6:	1f 92       	push	r1
  b8:	0f 92       	push	r0
  ba:	0f b6       	in	r0, 0x3f	; 63
  bc:	0f 92       	push	r0
  be:	11 24       	eor	r1, r1
  c0:	2f 93       	push	r18
  c2:	3f 93       	push	r19
  c4:	4f 93       	push	r20
  c6:	5f 93       	push	r21
  c8:	6f 93       	push	r22
  ca:	7f 93       	push	r23
  cc:	8f 93       	push	r24
  ce:	9f 93       	push	r25
  d0:	af 93       	push	r26
  d2:	20 91 a0 00 	lds	r18, 0x00A0	; 0x8000a0 <__data_end>
  d6:	30 91 a1 00 	lds	r19, 0x00A1	; 0x8000a1 <__data_end+0x1>
  da:	40 91 a2 00 	lds	r20, 0x00A2	; 0x8000a2 <__data_end+0x2>
  de:	50 91 a3 00 	lds	r21, 0x00A3	; 0x8000a3 <__data_end+0x3>
  e2:	60 91 a4 00 	lds	r22, 0x00A4	; 0x8000a4 <__data_end+0x4>
  e6:	70 91 a5 00 	lds	r23, 0x00A5	; 0x8000a5 <__data_end+0x5>
  ea:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end+0x6>
  ee:	90 91 a7 00 	lds	r25, 0x00A7	; 0x8000a7 <__data_end+0x7>
  f2:	a1 e0       	ldi	r26, 0x01	; 1
  f4:	46 d3       	rcall	.+1676   	; 0x782 <__adddi3_s8>
  f6:	20 93 a0 00 	sts	0x00A0, r18	; 0x8000a0 <__data_end>
  fa:	30 93 a1 00 	sts	0x00A1, r19	; 0x8000a1 <__data_end+0x1>
  fe:	40 93 a2 00 	sts	0x00A2, r20	; 0x8000a2 <__data_end+0x2>
 102:	50 93 a3 00 	sts	0x00A3, r21	; 0x8000a3 <__data_end+0x3>
 106:	60 93 a4 00 	sts	0x00A4, r22	; 0x8000a4 <__data_end+0x4>
 10a:	70 93 a5 00 	sts	0x00A5, r23	; 0x8000a5 <__data_end+0x5>
 10e:	80 93 a6 00 	sts	0x00A6, r24	; 0x8000a6 <__data_end+0x6>
 112:	90 93 a7 00 	sts	0x00A7, r25	; 0x8000a7 <__data_end+0x7>
 116:	82 e8       	ldi	r24, 0x82	; 130
 118:	82 bf       	out	0x32, r24	; 50
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:
	return sin_lookup[ approximation ];
}

void timer0_Init() {
	// Clear timer0 counter
	TCNT0 = 130;  //255-125=130
 136:	82 e8       	ldi	r24, 0x82	; 130
 138:	82 bf       	out	0x32, r24	; 50
	TIMSK0 = (1 << OCIE0A);		// Enable interrupt for timer0 overflow
 13a:	82 e0       	ldi	r24, 0x02	; 2
 13c:	89 bf       	out	0x39, r24	; 57
	TCCR0B = (1<<CS00)|(1<<CS01);	// Prescaler to 64, start timer
 13e:	83 e0       	ldi	r24, 0x03	; 3
 140:	83 bf       	out	0x33, r24	; 51
}

int main(void)
{
	timer0_Init();
	millSec = 0;  // init the millisecond counter
 142:	10 92 a0 00 	sts	0x00A0, r1	; 0x8000a0 <__data_end>
 146:	10 92 a1 00 	sts	0x00A1, r1	; 0x8000a1 <__data_end+0x1>
 14a:	10 92 a2 00 	sts	0x00A2, r1	; 0x8000a2 <__data_end+0x2>
 14e:	10 92 a3 00 	sts	0x00A3, r1	; 0x8000a3 <__data_end+0x3>
 152:	10 92 a4 00 	sts	0x00A4, r1	; 0x8000a4 <__data_end+0x4>
 156:	10 92 a5 00 	sts	0x00A5, r1	; 0x8000a5 <__data_end+0x5>
 15a:	10 92 a6 00 	sts	0x00A6, r1	; 0x8000a6 <__data_end+0x6>
 15e:	10 92 a7 00 	sts	0x00A7, r1	; 0x8000a7 <__data_end+0x7>
	for(int i = NUM_LEDS; i>0; i--){
		led[i-1].r=0;led[i-1].g=0;led[i-1].b=0;
 162:	10 92 ca 00 	sts	0x00CA, r1	; 0x8000ca <led+0x22>
 166:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <led+0x21>
 16a:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <led+0x23>
 16e:	10 92 c7 00 	sts	0x00C7, r1	; 0x8000c7 <led+0x1f>
 172:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <led+0x1e>
 176:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <led+0x20>
 17a:	10 92 c4 00 	sts	0x00C4, r1	; 0x8000c4 <led+0x1c>
 17e:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <led+0x1b>
 182:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <led+0x1d>
 186:	10 92 c1 00 	sts	0x00C1, r1	; 0x8000c1 <led+0x19>
 18a:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <led+0x18>
 18e:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <led+0x1a>
 192:	10 92 be 00 	sts	0x00BE, r1	; 0x8000be <led+0x16>
 196:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <led+0x15>
 19a:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <led+0x17>
 19e:	10 92 bb 00 	sts	0x00BB, r1	; 0x8000bb <led+0x13>
 1a2:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <led+0x12>
 1a6:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <led+0x14>
 1aa:	10 92 b8 00 	sts	0x00B8, r1	; 0x8000b8 <led+0x10>
 1ae:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <led+0xf>
 1b2:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <led+0x11>
 1b6:	10 92 b5 00 	sts	0x00B5, r1	; 0x8000b5 <led+0xd>
 1ba:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <led+0xc>
 1be:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <led+0xe>
 1c2:	10 92 b2 00 	sts	0x00B2, r1	; 0x8000b2 <led+0xa>
 1c6:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <led+0x9>
 1ca:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <led+0xb>
 1ce:	10 92 af 00 	sts	0x00AF, r1	; 0x8000af <led+0x7>
 1d2:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <led+0x6>
 1d6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <led+0x8>
 1da:	10 92 ac 00 	sts	0x00AC, r1	; 0x8000ac <led+0x4>
 1de:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <led+0x3>
 1e2:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <led+0x5>
 1e6:	10 92 a9 00 	sts	0x00A9, r1	; 0x8000a9 <led+0x1>
 1ea:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <led>
 1ee:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <led+0x2>
	}
	sei();	
 1f2:	78 94       	sei
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 1f4:	cf e3       	ldi	r28, 0x3F	; 63
 1f6:	d0 e0       	ldi	r29, 0x00	; 0
	sei();	
	
	
    while (1) 
    {
			long currTime = millSec;
 1f8:	50 91 a0 00 	lds	r21, 0x00A0	; 0x8000a0 <__data_end>
 1fc:	40 91 a1 00 	lds	r20, 0x00A1	; 0x8000a1 <__data_end+0x1>
 200:	30 91 a2 00 	lds	r19, 0x00A2	; 0x8000a2 <__data_end+0x2>
 204:	20 91 a3 00 	lds	r18, 0x00A3	; 0x8000a3 <__data_end+0x3>
 208:	80 91 a4 00 	lds	r24, 0x00A4	; 0x8000a4 <__data_end+0x4>
 20c:	80 91 a5 00 	lds	r24, 0x00A5	; 0x8000a5 <__data_end+0x5>
 210:	80 91 a6 00 	lds	r24, 0x00A6	; 0x8000a6 <__data_end+0x6>
 214:	80 91 a7 00 	lds	r24, 0x00A7	; 0x8000a7 <__data_end+0x7>
	unsigned int approximation = ((unsigned int)(input * 10) % max_fastSin_input);
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
 218:	65 2f       	mov	r22, r21
 21a:	74 2f       	mov	r23, r20
 21c:	83 2f       	mov	r24, r19
 21e:	92 2f       	mov	r25, r18
 220:	a5 d1       	rcall	.+842    	; 0x56c <__floatsisf>
 222:	2a e0       	ldi	r18, 0x0A	; 10
 224:	37 ed       	ldi	r19, 0xD7	; 215
 226:	43 e2       	ldi	r20, 0x23	; 35
 228:	5c e3       	ldi	r21, 0x3C	; 60
 22a:	2c d2       	rcall	.+1112   	; 0x684 <__mulsf3>
 22c:	20 e0       	ldi	r18, 0x00	; 0
 22e:	30 e0       	ldi	r19, 0x00	; 0
 230:	40 e2       	ldi	r20, 0x20	; 32
 232:	51 e4       	ldi	r21, 0x41	; 65
 234:	27 d2       	rcall	.+1102   	; 0x684 <__mulsf3>
 236:	6b 01       	movw	r12, r22
 238:	7c 01       	movw	r14, r24
	return sin_lookup[ approximation ];
 23a:	20 e0       	ldi	r18, 0x00	; 0
 23c:	30 e0       	ldi	r19, 0x00	; 0
 23e:	40 e8       	ldi	r20, 0x80	; 128
 240:	52 e4       	ldi	r21, 0x42	; 66
 242:	02 d1       	rcall	.+516    	; 0x448 <__addsf3>
 244:	65 d1       	rcall	.+714    	; 0x510 <__fixunssfsi>
 246:	cb 01       	movw	r24, r22
 248:	be 01       	movw	r22, r28
 24a:	87 d2       	rcall	.+1294   	; 0x75a <__udivmodhi4>
 24c:	fc 01       	movw	r30, r24
 24e:	e0 5a       	subi	r30, 0xA0	; 160
 250:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 252:	80 81       	ld	r24, Z
 254:	80 93 ca 00 	sts	0x00CA, r24	; 0x8000ca <led+0x22>
				led[i-1].g=0;
 258:	10 92 c9 00 	sts	0x00C9, r1	; 0x8000c9 <led+0x21>
				led[i-1].b=0;
 25c:	10 92 cb 00 	sts	0x00CB, r1	; 0x8000cb <led+0x23>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 260:	2b ea       	ldi	r18, 0xAB	; 171
 262:	3a ea       	ldi	r19, 0xAA	; 170
 264:	4a e6       	ldi	r20, 0x6A	; 106
 266:	52 e4       	ldi	r21, 0x42	; 66
 268:	c7 01       	movw	r24, r14
 26a:	b6 01       	movw	r22, r12
 26c:	ed d0       	rcall	.+474    	; 0x448 <__addsf3>
 26e:	50 d1       	rcall	.+672    	; 0x510 <__fixunssfsi>
 270:	cb 01       	movw	r24, r22
 272:	be 01       	movw	r22, r28
 274:	72 d2       	rcall	.+1252   	; 0x75a <__udivmodhi4>
 276:	fc 01       	movw	r30, r24
 278:	e0 5a       	subi	r30, 0xA0	; 160
 27a:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 27c:	80 81       	ld	r24, Z
 27e:	80 93 c7 00 	sts	0x00C7, r24	; 0x8000c7 <led+0x1f>
				led[i-1].g=0;
 282:	10 92 c6 00 	sts	0x00C6, r1	; 0x8000c6 <led+0x1e>
				led[i-1].b=0;
 286:	10 92 c8 00 	sts	0x00C8, r1	; 0x8000c8 <led+0x20>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 28a:	25 e5       	ldi	r18, 0x55	; 85
 28c:	35 e5       	ldi	r19, 0x55	; 85
 28e:	45 e5       	ldi	r20, 0x55	; 85
 290:	52 e4       	ldi	r21, 0x42	; 66
 292:	c7 01       	movw	r24, r14
 294:	b6 01       	movw	r22, r12
 296:	d8 d0       	rcall	.+432    	; 0x448 <__addsf3>
 298:	3b d1       	rcall	.+630    	; 0x510 <__fixunssfsi>
 29a:	cb 01       	movw	r24, r22
 29c:	be 01       	movw	r22, r28
 29e:	5d d2       	rcall	.+1210   	; 0x75a <__udivmodhi4>
 2a0:	fc 01       	movw	r30, r24
 2a2:	e0 5a       	subi	r30, 0xA0	; 160
 2a4:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 2a6:	80 81       	ld	r24, Z
 2a8:	80 93 c4 00 	sts	0x00C4, r24	; 0x8000c4 <led+0x1c>
				led[i-1].g=0;
 2ac:	10 92 c3 00 	sts	0x00C3, r1	; 0x8000c3 <led+0x1b>
				led[i-1].b=0;
 2b0:	10 92 c5 00 	sts	0x00C5, r1	; 0x8000c5 <led+0x1d>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 2b4:	20 e0       	ldi	r18, 0x00	; 0
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	40 e4       	ldi	r20, 0x40	; 64
 2ba:	52 e4       	ldi	r21, 0x42	; 66
 2bc:	c7 01       	movw	r24, r14
 2be:	b6 01       	movw	r22, r12
 2c0:	c3 d0       	rcall	.+390    	; 0x448 <__addsf3>
 2c2:	26 d1       	rcall	.+588    	; 0x510 <__fixunssfsi>
 2c4:	cb 01       	movw	r24, r22
 2c6:	be 01       	movw	r22, r28
 2c8:	48 d2       	rcall	.+1168   	; 0x75a <__udivmodhi4>
 2ca:	fc 01       	movw	r30, r24
 2cc:	e0 5a       	subi	r30, 0xA0	; 160
 2ce:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 2d0:	80 81       	ld	r24, Z
 2d2:	80 93 c1 00 	sts	0x00C1, r24	; 0x8000c1 <led+0x19>
				led[i-1].g=0;
 2d6:	10 92 c0 00 	sts	0x00C0, r1	; 0x8000c0 <led+0x18>
				led[i-1].b=0;
 2da:	10 92 c2 00 	sts	0x00C2, r1	; 0x8000c2 <led+0x1a>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 2de:	2b ea       	ldi	r18, 0xAB	; 171
 2e0:	3a ea       	ldi	r19, 0xAA	; 170
 2e2:	4a e2       	ldi	r20, 0x2A	; 42
 2e4:	52 e4       	ldi	r21, 0x42	; 66
 2e6:	c7 01       	movw	r24, r14
 2e8:	b6 01       	movw	r22, r12
 2ea:	ae d0       	rcall	.+348    	; 0x448 <__addsf3>
 2ec:	11 d1       	rcall	.+546    	; 0x510 <__fixunssfsi>
 2ee:	cb 01       	movw	r24, r22
 2f0:	be 01       	movw	r22, r28
 2f2:	33 d2       	rcall	.+1126   	; 0x75a <__udivmodhi4>
 2f4:	fc 01       	movw	r30, r24
 2f6:	e0 5a       	subi	r30, 0xA0	; 160
 2f8:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 2fa:	80 81       	ld	r24, Z
 2fc:	80 93 be 00 	sts	0x00BE, r24	; 0x8000be <led+0x16>
				led[i-1].g=0;
 300:	10 92 bd 00 	sts	0x00BD, r1	; 0x8000bd <led+0x15>
				led[i-1].b=0;
 304:	10 92 bf 00 	sts	0x00BF, r1	; 0x8000bf <led+0x17>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 308:	25 e5       	ldi	r18, 0x55	; 85
 30a:	35 e5       	ldi	r19, 0x55	; 85
 30c:	45 e1       	ldi	r20, 0x15	; 21
 30e:	52 e4       	ldi	r21, 0x42	; 66
 310:	c7 01       	movw	r24, r14
 312:	b6 01       	movw	r22, r12
 314:	99 d0       	rcall	.+306    	; 0x448 <__addsf3>
 316:	fc d0       	rcall	.+504    	; 0x510 <__fixunssfsi>
 318:	cb 01       	movw	r24, r22
 31a:	be 01       	movw	r22, r28
 31c:	1e d2       	rcall	.+1084   	; 0x75a <__udivmodhi4>
 31e:	fc 01       	movw	r30, r24
 320:	e0 5a       	subi	r30, 0xA0	; 160
 322:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 324:	80 81       	ld	r24, Z
 326:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <led+0x13>
				led[i-1].g=0;
 32a:	10 92 ba 00 	sts	0x00BA, r1	; 0x8000ba <led+0x12>
				led[i-1].b=0;
 32e:	10 92 bc 00 	sts	0x00BC, r1	; 0x8000bc <led+0x14>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 332:	20 e0       	ldi	r18, 0x00	; 0
 334:	30 e0       	ldi	r19, 0x00	; 0
 336:	40 e0       	ldi	r20, 0x00	; 0
 338:	52 e4       	ldi	r21, 0x42	; 66
 33a:	c7 01       	movw	r24, r14
 33c:	b6 01       	movw	r22, r12
 33e:	84 d0       	rcall	.+264    	; 0x448 <__addsf3>
 340:	e7 d0       	rcall	.+462    	; 0x510 <__fixunssfsi>
 342:	cb 01       	movw	r24, r22
 344:	be 01       	movw	r22, r28
 346:	09 d2       	rcall	.+1042   	; 0x75a <__udivmodhi4>
 348:	fc 01       	movw	r30, r24
 34a:	e0 5a       	subi	r30, 0xA0	; 160
 34c:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 34e:	80 81       	ld	r24, Z
 350:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <led+0x10>
				led[i-1].g=0;
 354:	10 92 b7 00 	sts	0x00B7, r1	; 0x8000b7 <led+0xf>
				led[i-1].b=0;
 358:	10 92 b9 00 	sts	0x00B9, r1	; 0x8000b9 <led+0x11>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 35c:	25 e5       	ldi	r18, 0x55	; 85
 35e:	35 e5       	ldi	r19, 0x55	; 85
 360:	45 ed       	ldi	r20, 0xD5	; 213
 362:	51 e4       	ldi	r21, 0x41	; 65
 364:	c7 01       	movw	r24, r14
 366:	b6 01       	movw	r22, r12
 368:	6f d0       	rcall	.+222    	; 0x448 <__addsf3>
 36a:	d2 d0       	rcall	.+420    	; 0x510 <__fixunssfsi>
 36c:	cb 01       	movw	r24, r22
 36e:	be 01       	movw	r22, r28
 370:	f4 d1       	rcall	.+1000   	; 0x75a <__udivmodhi4>
 372:	fc 01       	movw	r30, r24
 374:	e0 5a       	subi	r30, 0xA0	; 160
 376:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 378:	80 81       	ld	r24, Z
 37a:	80 93 b5 00 	sts	0x00B5, r24	; 0x8000b5 <led+0xd>
				led[i-1].g=0;
 37e:	10 92 b4 00 	sts	0x00B4, r1	; 0x8000b4 <led+0xc>
				led[i-1].b=0;
 382:	10 92 b6 00 	sts	0x00B6, r1	; 0x8000b6 <led+0xe>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 386:	2b ea       	ldi	r18, 0xAB	; 171
 388:	3a ea       	ldi	r19, 0xAA	; 170
 38a:	4a ea       	ldi	r20, 0xAA	; 170
 38c:	51 e4       	ldi	r21, 0x41	; 65
 38e:	c7 01       	movw	r24, r14
 390:	b6 01       	movw	r22, r12
 392:	5a d0       	rcall	.+180    	; 0x448 <__addsf3>
 394:	bd d0       	rcall	.+378    	; 0x510 <__fixunssfsi>
 396:	cb 01       	movw	r24, r22
 398:	be 01       	movw	r22, r28
 39a:	df d1       	rcall	.+958    	; 0x75a <__udivmodhi4>
 39c:	fc 01       	movw	r30, r24
 39e:	e0 5a       	subi	r30, 0xA0	; 160
 3a0:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 3a2:	80 81       	ld	r24, Z
 3a4:	80 93 b2 00 	sts	0x00B2, r24	; 0x8000b2 <led+0xa>
				led[i-1].g=0;
 3a8:	10 92 b1 00 	sts	0x00B1, r1	; 0x8000b1 <led+0x9>
				led[i-1].b=0;
 3ac:	10 92 b3 00 	sts	0x00B3, r1	; 0x8000b3 <led+0xb>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 3b0:	20 e0       	ldi	r18, 0x00	; 0
 3b2:	30 e0       	ldi	r19, 0x00	; 0
 3b4:	40 e8       	ldi	r20, 0x80	; 128
 3b6:	51 e4       	ldi	r21, 0x41	; 65
 3b8:	c7 01       	movw	r24, r14
 3ba:	b6 01       	movw	r22, r12
 3bc:	45 d0       	rcall	.+138    	; 0x448 <__addsf3>
 3be:	a8 d0       	rcall	.+336    	; 0x510 <__fixunssfsi>
 3c0:	cb 01       	movw	r24, r22
 3c2:	be 01       	movw	r22, r28
 3c4:	ca d1       	rcall	.+916    	; 0x75a <__udivmodhi4>
 3c6:	fc 01       	movw	r30, r24
 3c8:	e0 5a       	subi	r30, 0xA0	; 160
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 3cc:	80 81       	ld	r24, Z
 3ce:	80 93 af 00 	sts	0x00AF, r24	; 0x8000af <led+0x7>
				led[i-1].g=0;
 3d2:	10 92 ae 00 	sts	0x00AE, r1	; 0x8000ae <led+0x6>
				led[i-1].b=0;
 3d6:	10 92 b0 00 	sts	0x00B0, r1	; 0x8000b0 <led+0x8>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 3da:	2b ea       	ldi	r18, 0xAB	; 171
 3dc:	3a ea       	ldi	r19, 0xAA	; 170
 3de:	4a e2       	ldi	r20, 0x2A	; 42
 3e0:	51 e4       	ldi	r21, 0x41	; 65
 3e2:	c7 01       	movw	r24, r14
 3e4:	b6 01       	movw	r22, r12
 3e6:	30 d0       	rcall	.+96     	; 0x448 <__addsf3>
 3e8:	93 d0       	rcall	.+294    	; 0x510 <__fixunssfsi>
 3ea:	cb 01       	movw	r24, r22
 3ec:	be 01       	movw	r22, r28
 3ee:	b5 d1       	rcall	.+874    	; 0x75a <__udivmodhi4>
 3f0:	fc 01       	movw	r30, r24
 3f2:	e0 5a       	subi	r30, 0xA0	; 160
 3f4:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 3f6:	80 81       	ld	r24, Z
 3f8:	80 93 ac 00 	sts	0x00AC, r24	; 0x8000ac <led+0x4>
				led[i-1].g=0;
 3fc:	10 92 ab 00 	sts	0x00AB, r1	; 0x8000ab <led+0x3>
				led[i-1].b=0;
 400:	10 92 ad 00 	sts	0x00AD, r1	; 0x8000ad <led+0x5>
	return sin_lookup[ approximation ];
}

inline unsigned int fastSinPhaseDelay( float input , float phaseAdjust){
	unsigned int approximation = (unsigned int)(input * 10 + phaseAdjust*64) % max_fastSin_input;
	return sin_lookup[ approximation ];
 404:	2b ea       	ldi	r18, 0xAB	; 171
 406:	3a ea       	ldi	r19, 0xAA	; 170
 408:	4a ea       	ldi	r20, 0xAA	; 170
 40a:	50 e4       	ldi	r21, 0x40	; 64
 40c:	c7 01       	movw	r24, r14
 40e:	b6 01       	movw	r22, r12
 410:	1b d0       	rcall	.+54     	; 0x448 <__addsf3>
 412:	7e d0       	rcall	.+252    	; 0x510 <__fixunssfsi>
 414:	cb 01       	movw	r24, r22
 416:	be 01       	movw	r22, r28
 418:	a0 d1       	rcall	.+832    	; 0x75a <__udivmodhi4>
 41a:	fc 01       	movw	r30, r24
 41c:	e0 5a       	subi	r30, 0xA0	; 160
 41e:	ff 4f       	sbci	r31, 0xFF	; 255
    while (1) 
    {
			long currTime = millSec;
			for(int i = NUM_LEDS; i>0; i--){
				float fracLEDs = (float)i/(float)NUM_LEDS;
				led[i-1].r=fastSinPhaseDelay( currTime * 0.01 , fracLEDs);
 420:	80 81       	ld	r24, Z
 422:	80 93 a9 00 	sts	0x00A9, r24	; 0x8000a9 <led+0x1>
				led[i-1].g=0;
 426:	10 92 a8 00 	sts	0x00A8, r1	; 0x8000a8 <led>
				led[i-1].b=0;
 42a:	10 92 aa 00 	sts	0x00AA, r1	; 0x8000aa <led+0x2>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 42e:	8f e0       	ldi	r24, 0x0F	; 15
 430:	97 e2       	ldi	r25, 0x27	; 39
 432:	01 97       	sbiw	r24, 0x01	; 1
 434:	f1 f7       	brne	.-4      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
 436:	00 c0       	rjmp	.+0      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
 438:	00 00       	nop
			}
			_delay_ms(5);
			ws2812_sendarray((uint8_t *)led,36);
 43a:	64 e2       	ldi	r22, 0x24	; 36
 43c:	70 e0       	ldi	r23, 0x00	; 0
 43e:	88 ea       	ldi	r24, 0xA8	; 168
 440:	90 e0       	ldi	r25, 0x00	; 0
 442:	0b de       	rcall	.-1002   	; 0x5a <ws2812_sendarray>
 444:	d9 ce       	rjmp	.-590    	; 0x1f8 <main+0xc2>

00000446 <__subsf3>:
 446:	50 58       	subi	r21, 0x80	; 128

00000448 <__addsf3>:
 448:	bb 27       	eor	r27, r27
 44a:	aa 27       	eor	r26, r26
 44c:	0e d0       	rcall	.+28     	; 0x46a <__addsf3x>
 44e:	e0 c0       	rjmp	.+448    	; 0x610 <__fp_round>
 450:	d1 d0       	rcall	.+418    	; 0x5f4 <__fp_pscA>
 452:	30 f0       	brcs	.+12     	; 0x460 <__addsf3+0x18>
 454:	d6 d0       	rcall	.+428    	; 0x602 <__fp_pscB>
 456:	20 f0       	brcs	.+8      	; 0x460 <__addsf3+0x18>
 458:	31 f4       	brne	.+12     	; 0x466 <__addsf3+0x1e>
 45a:	9f 3f       	cpi	r25, 0xFF	; 255
 45c:	11 f4       	brne	.+4      	; 0x462 <__addsf3+0x1a>
 45e:	1e f4       	brtc	.+6      	; 0x466 <__addsf3+0x1e>
 460:	c6 c0       	rjmp	.+396    	; 0x5ee <__fp_nan>
 462:	0e f4       	brtc	.+2      	; 0x466 <__addsf3+0x1e>
 464:	e0 95       	com	r30
 466:	e7 fb       	bst	r30, 7
 468:	bc c0       	rjmp	.+376    	; 0x5e2 <__fp_inf>

0000046a <__addsf3x>:
 46a:	e9 2f       	mov	r30, r25
 46c:	e2 d0       	rcall	.+452    	; 0x632 <__fp_split3>
 46e:	80 f3       	brcs	.-32     	; 0x450 <__addsf3+0x8>
 470:	ba 17       	cp	r27, r26
 472:	62 07       	cpc	r22, r18
 474:	73 07       	cpc	r23, r19
 476:	84 07       	cpc	r24, r20
 478:	95 07       	cpc	r25, r21
 47a:	18 f0       	brcs	.+6      	; 0x482 <__addsf3x+0x18>
 47c:	71 f4       	brne	.+28     	; 0x49a <__addsf3x+0x30>
 47e:	9e f5       	brtc	.+102    	; 0x4e6 <__addsf3x+0x7c>
 480:	fa c0       	rjmp	.+500    	; 0x676 <__fp_zero>
 482:	0e f4       	brtc	.+2      	; 0x486 <__addsf3x+0x1c>
 484:	e0 95       	com	r30
 486:	0b 2e       	mov	r0, r27
 488:	ba 2f       	mov	r27, r26
 48a:	a0 2d       	mov	r26, r0
 48c:	0b 01       	movw	r0, r22
 48e:	b9 01       	movw	r22, r18
 490:	90 01       	movw	r18, r0
 492:	0c 01       	movw	r0, r24
 494:	ca 01       	movw	r24, r20
 496:	a0 01       	movw	r20, r0
 498:	11 24       	eor	r1, r1
 49a:	ff 27       	eor	r31, r31
 49c:	59 1b       	sub	r21, r25
 49e:	99 f0       	breq	.+38     	; 0x4c6 <__addsf3x+0x5c>
 4a0:	59 3f       	cpi	r21, 0xF9	; 249
 4a2:	50 f4       	brcc	.+20     	; 0x4b8 <__addsf3x+0x4e>
 4a4:	50 3e       	cpi	r21, 0xE0	; 224
 4a6:	68 f1       	brcs	.+90     	; 0x502 <__addsf3x+0x98>
 4a8:	1a 16       	cp	r1, r26
 4aa:	f0 40       	sbci	r31, 0x00	; 0
 4ac:	a2 2f       	mov	r26, r18
 4ae:	23 2f       	mov	r18, r19
 4b0:	34 2f       	mov	r19, r20
 4b2:	44 27       	eor	r20, r20
 4b4:	58 5f       	subi	r21, 0xF8	; 248
 4b6:	f3 cf       	rjmp	.-26     	; 0x49e <__addsf3x+0x34>
 4b8:	46 95       	lsr	r20
 4ba:	37 95       	ror	r19
 4bc:	27 95       	ror	r18
 4be:	a7 95       	ror	r26
 4c0:	f0 40       	sbci	r31, 0x00	; 0
 4c2:	53 95       	inc	r21
 4c4:	c9 f7       	brne	.-14     	; 0x4b8 <__addsf3x+0x4e>
 4c6:	7e f4       	brtc	.+30     	; 0x4e6 <__addsf3x+0x7c>
 4c8:	1f 16       	cp	r1, r31
 4ca:	ba 0b       	sbc	r27, r26
 4cc:	62 0b       	sbc	r22, r18
 4ce:	73 0b       	sbc	r23, r19
 4d0:	84 0b       	sbc	r24, r20
 4d2:	ba f0       	brmi	.+46     	; 0x502 <__addsf3x+0x98>
 4d4:	91 50       	subi	r25, 0x01	; 1
 4d6:	a1 f0       	breq	.+40     	; 0x500 <__addsf3x+0x96>
 4d8:	ff 0f       	add	r31, r31
 4da:	bb 1f       	adc	r27, r27
 4dc:	66 1f       	adc	r22, r22
 4de:	77 1f       	adc	r23, r23
 4e0:	88 1f       	adc	r24, r24
 4e2:	c2 f7       	brpl	.-16     	; 0x4d4 <__addsf3x+0x6a>
 4e4:	0e c0       	rjmp	.+28     	; 0x502 <__addsf3x+0x98>
 4e6:	ba 0f       	add	r27, r26
 4e8:	62 1f       	adc	r22, r18
 4ea:	73 1f       	adc	r23, r19
 4ec:	84 1f       	adc	r24, r20
 4ee:	48 f4       	brcc	.+18     	; 0x502 <__addsf3x+0x98>
 4f0:	87 95       	ror	r24
 4f2:	77 95       	ror	r23
 4f4:	67 95       	ror	r22
 4f6:	b7 95       	ror	r27
 4f8:	f7 95       	ror	r31
 4fa:	9e 3f       	cpi	r25, 0xFE	; 254
 4fc:	08 f0       	brcs	.+2      	; 0x500 <__addsf3x+0x96>
 4fe:	b3 cf       	rjmp	.-154    	; 0x466 <__addsf3+0x1e>
 500:	93 95       	inc	r25
 502:	88 0f       	add	r24, r24
 504:	08 f0       	brcs	.+2      	; 0x508 <__addsf3x+0x9e>
 506:	99 27       	eor	r25, r25
 508:	ee 0f       	add	r30, r30
 50a:	97 95       	ror	r25
 50c:	87 95       	ror	r24
 50e:	08 95       	ret

00000510 <__fixunssfsi>:
 510:	98 d0       	rcall	.+304    	; 0x642 <__fp_splitA>
 512:	88 f0       	brcs	.+34     	; 0x536 <__fixunssfsi+0x26>
 514:	9f 57       	subi	r25, 0x7F	; 127
 516:	90 f0       	brcs	.+36     	; 0x53c <__fixunssfsi+0x2c>
 518:	b9 2f       	mov	r27, r25
 51a:	99 27       	eor	r25, r25
 51c:	b7 51       	subi	r27, 0x17	; 23
 51e:	a0 f0       	brcs	.+40     	; 0x548 <__fixunssfsi+0x38>
 520:	d1 f0       	breq	.+52     	; 0x556 <__fixunssfsi+0x46>
 522:	66 0f       	add	r22, r22
 524:	77 1f       	adc	r23, r23
 526:	88 1f       	adc	r24, r24
 528:	99 1f       	adc	r25, r25
 52a:	1a f0       	brmi	.+6      	; 0x532 <__fixunssfsi+0x22>
 52c:	ba 95       	dec	r27
 52e:	c9 f7       	brne	.-14     	; 0x522 <__fixunssfsi+0x12>
 530:	12 c0       	rjmp	.+36     	; 0x556 <__fixunssfsi+0x46>
 532:	b1 30       	cpi	r27, 0x01	; 1
 534:	81 f0       	breq	.+32     	; 0x556 <__fixunssfsi+0x46>
 536:	9f d0       	rcall	.+318    	; 0x676 <__fp_zero>
 538:	b1 e0       	ldi	r27, 0x01	; 1
 53a:	08 95       	ret
 53c:	9c c0       	rjmp	.+312    	; 0x676 <__fp_zero>
 53e:	67 2f       	mov	r22, r23
 540:	78 2f       	mov	r23, r24
 542:	88 27       	eor	r24, r24
 544:	b8 5f       	subi	r27, 0xF8	; 248
 546:	39 f0       	breq	.+14     	; 0x556 <__fixunssfsi+0x46>
 548:	b9 3f       	cpi	r27, 0xF9	; 249
 54a:	cc f3       	brlt	.-14     	; 0x53e <__fixunssfsi+0x2e>
 54c:	86 95       	lsr	r24
 54e:	77 95       	ror	r23
 550:	67 95       	ror	r22
 552:	b3 95       	inc	r27
 554:	d9 f7       	brne	.-10     	; 0x54c <__fixunssfsi+0x3c>
 556:	3e f4       	brtc	.+14     	; 0x566 <__fixunssfsi+0x56>
 558:	90 95       	com	r25
 55a:	80 95       	com	r24
 55c:	70 95       	com	r23
 55e:	61 95       	neg	r22
 560:	7f 4f       	sbci	r23, 0xFF	; 255
 562:	8f 4f       	sbci	r24, 0xFF	; 255
 564:	9f 4f       	sbci	r25, 0xFF	; 255
 566:	08 95       	ret

00000568 <__floatunsisf>:
 568:	e8 94       	clt
 56a:	09 c0       	rjmp	.+18     	; 0x57e <__floatsisf+0x12>

0000056c <__floatsisf>:
 56c:	97 fb       	bst	r25, 7
 56e:	3e f4       	brtc	.+14     	; 0x57e <__floatsisf+0x12>
 570:	90 95       	com	r25
 572:	80 95       	com	r24
 574:	70 95       	com	r23
 576:	61 95       	neg	r22
 578:	7f 4f       	sbci	r23, 0xFF	; 255
 57a:	8f 4f       	sbci	r24, 0xFF	; 255
 57c:	9f 4f       	sbci	r25, 0xFF	; 255
 57e:	99 23       	and	r25, r25
 580:	a9 f0       	breq	.+42     	; 0x5ac <__floatsisf+0x40>
 582:	f9 2f       	mov	r31, r25
 584:	96 e9       	ldi	r25, 0x96	; 150
 586:	bb 27       	eor	r27, r27
 588:	93 95       	inc	r25
 58a:	f6 95       	lsr	r31
 58c:	87 95       	ror	r24
 58e:	77 95       	ror	r23
 590:	67 95       	ror	r22
 592:	b7 95       	ror	r27
 594:	f1 11       	cpse	r31, r1
 596:	f8 cf       	rjmp	.-16     	; 0x588 <__floatsisf+0x1c>
 598:	fa f4       	brpl	.+62     	; 0x5d8 <__floatsisf+0x6c>
 59a:	bb 0f       	add	r27, r27
 59c:	11 f4       	brne	.+4      	; 0x5a2 <__floatsisf+0x36>
 59e:	60 ff       	sbrs	r22, 0
 5a0:	1b c0       	rjmp	.+54     	; 0x5d8 <__floatsisf+0x6c>
 5a2:	6f 5f       	subi	r22, 0xFF	; 255
 5a4:	7f 4f       	sbci	r23, 0xFF	; 255
 5a6:	8f 4f       	sbci	r24, 0xFF	; 255
 5a8:	9f 4f       	sbci	r25, 0xFF	; 255
 5aa:	16 c0       	rjmp	.+44     	; 0x5d8 <__floatsisf+0x6c>
 5ac:	88 23       	and	r24, r24
 5ae:	11 f0       	breq	.+4      	; 0x5b4 <__floatsisf+0x48>
 5b0:	96 e9       	ldi	r25, 0x96	; 150
 5b2:	11 c0       	rjmp	.+34     	; 0x5d6 <__floatsisf+0x6a>
 5b4:	77 23       	and	r23, r23
 5b6:	21 f0       	breq	.+8      	; 0x5c0 <__floatsisf+0x54>
 5b8:	9e e8       	ldi	r25, 0x8E	; 142
 5ba:	87 2f       	mov	r24, r23
 5bc:	76 2f       	mov	r23, r22
 5be:	05 c0       	rjmp	.+10     	; 0x5ca <__floatsisf+0x5e>
 5c0:	66 23       	and	r22, r22
 5c2:	71 f0       	breq	.+28     	; 0x5e0 <__floatsisf+0x74>
 5c4:	96 e8       	ldi	r25, 0x86	; 134
 5c6:	86 2f       	mov	r24, r22
 5c8:	70 e0       	ldi	r23, 0x00	; 0
 5ca:	60 e0       	ldi	r22, 0x00	; 0
 5cc:	2a f0       	brmi	.+10     	; 0x5d8 <__floatsisf+0x6c>
 5ce:	9a 95       	dec	r25
 5d0:	66 0f       	add	r22, r22
 5d2:	77 1f       	adc	r23, r23
 5d4:	88 1f       	adc	r24, r24
 5d6:	da f7       	brpl	.-10     	; 0x5ce <__floatsisf+0x62>
 5d8:	88 0f       	add	r24, r24
 5da:	96 95       	lsr	r25
 5dc:	87 95       	ror	r24
 5de:	97 f9       	bld	r25, 7
 5e0:	08 95       	ret

000005e2 <__fp_inf>:
 5e2:	97 f9       	bld	r25, 7
 5e4:	9f 67       	ori	r25, 0x7F	; 127
 5e6:	80 e8       	ldi	r24, 0x80	; 128
 5e8:	70 e0       	ldi	r23, 0x00	; 0
 5ea:	60 e0       	ldi	r22, 0x00	; 0
 5ec:	08 95       	ret

000005ee <__fp_nan>:
 5ee:	9f ef       	ldi	r25, 0xFF	; 255
 5f0:	80 ec       	ldi	r24, 0xC0	; 192
 5f2:	08 95       	ret

000005f4 <__fp_pscA>:
 5f4:	00 24       	eor	r0, r0
 5f6:	0a 94       	dec	r0
 5f8:	16 16       	cp	r1, r22
 5fa:	17 06       	cpc	r1, r23
 5fc:	18 06       	cpc	r1, r24
 5fe:	09 06       	cpc	r0, r25
 600:	08 95       	ret

00000602 <__fp_pscB>:
 602:	00 24       	eor	r0, r0
 604:	0a 94       	dec	r0
 606:	12 16       	cp	r1, r18
 608:	13 06       	cpc	r1, r19
 60a:	14 06       	cpc	r1, r20
 60c:	05 06       	cpc	r0, r21
 60e:	08 95       	ret

00000610 <__fp_round>:
 610:	09 2e       	mov	r0, r25
 612:	03 94       	inc	r0
 614:	00 0c       	add	r0, r0
 616:	11 f4       	brne	.+4      	; 0x61c <__fp_round+0xc>
 618:	88 23       	and	r24, r24
 61a:	52 f0       	brmi	.+20     	; 0x630 <__fp_round+0x20>
 61c:	bb 0f       	add	r27, r27
 61e:	40 f4       	brcc	.+16     	; 0x630 <__fp_round+0x20>
 620:	bf 2b       	or	r27, r31
 622:	11 f4       	brne	.+4      	; 0x628 <__fp_round+0x18>
 624:	60 ff       	sbrs	r22, 0
 626:	04 c0       	rjmp	.+8      	; 0x630 <__fp_round+0x20>
 628:	6f 5f       	subi	r22, 0xFF	; 255
 62a:	7f 4f       	sbci	r23, 0xFF	; 255
 62c:	8f 4f       	sbci	r24, 0xFF	; 255
 62e:	9f 4f       	sbci	r25, 0xFF	; 255
 630:	08 95       	ret

00000632 <__fp_split3>:
 632:	57 fd       	sbrc	r21, 7
 634:	90 58       	subi	r25, 0x80	; 128
 636:	44 0f       	add	r20, r20
 638:	55 1f       	adc	r21, r21
 63a:	59 f0       	breq	.+22     	; 0x652 <__fp_splitA+0x10>
 63c:	5f 3f       	cpi	r21, 0xFF	; 255
 63e:	71 f0       	breq	.+28     	; 0x65c <__fp_splitA+0x1a>
 640:	47 95       	ror	r20

00000642 <__fp_splitA>:
 642:	88 0f       	add	r24, r24
 644:	97 fb       	bst	r25, 7
 646:	99 1f       	adc	r25, r25
 648:	61 f0       	breq	.+24     	; 0x662 <__fp_splitA+0x20>
 64a:	9f 3f       	cpi	r25, 0xFF	; 255
 64c:	79 f0       	breq	.+30     	; 0x66c <__fp_splitA+0x2a>
 64e:	87 95       	ror	r24
 650:	08 95       	ret
 652:	12 16       	cp	r1, r18
 654:	13 06       	cpc	r1, r19
 656:	14 06       	cpc	r1, r20
 658:	55 1f       	adc	r21, r21
 65a:	f2 cf       	rjmp	.-28     	; 0x640 <__fp_split3+0xe>
 65c:	46 95       	lsr	r20
 65e:	f1 df       	rcall	.-30     	; 0x642 <__fp_splitA>
 660:	08 c0       	rjmp	.+16     	; 0x672 <__fp_splitA+0x30>
 662:	16 16       	cp	r1, r22
 664:	17 06       	cpc	r1, r23
 666:	18 06       	cpc	r1, r24
 668:	99 1f       	adc	r25, r25
 66a:	f1 cf       	rjmp	.-30     	; 0x64e <__fp_splitA+0xc>
 66c:	86 95       	lsr	r24
 66e:	71 05       	cpc	r23, r1
 670:	61 05       	cpc	r22, r1
 672:	08 94       	sec
 674:	08 95       	ret

00000676 <__fp_zero>:
 676:	e8 94       	clt

00000678 <__fp_szero>:
 678:	bb 27       	eor	r27, r27
 67a:	66 27       	eor	r22, r22
 67c:	77 27       	eor	r23, r23
 67e:	cb 01       	movw	r24, r22
 680:	97 f9       	bld	r25, 7
 682:	08 95       	ret

00000684 <__mulsf3>:
 684:	0a d0       	rcall	.+20     	; 0x69a <__mulsf3x>
 686:	c4 cf       	rjmp	.-120    	; 0x610 <__fp_round>
 688:	b5 df       	rcall	.-150    	; 0x5f4 <__fp_pscA>
 68a:	28 f0       	brcs	.+10     	; 0x696 <__mulsf3+0x12>
 68c:	ba df       	rcall	.-140    	; 0x602 <__fp_pscB>
 68e:	18 f0       	brcs	.+6      	; 0x696 <__mulsf3+0x12>
 690:	95 23       	and	r25, r21
 692:	09 f0       	breq	.+2      	; 0x696 <__mulsf3+0x12>
 694:	a6 cf       	rjmp	.-180    	; 0x5e2 <__fp_inf>
 696:	ab cf       	rjmp	.-170    	; 0x5ee <__fp_nan>
 698:	ef cf       	rjmp	.-34     	; 0x678 <__fp_szero>

0000069a <__mulsf3x>:
 69a:	cb df       	rcall	.-106    	; 0x632 <__fp_split3>
 69c:	a8 f3       	brcs	.-22     	; 0x688 <__mulsf3+0x4>

0000069e <__mulsf3_pse>:
 69e:	99 23       	and	r25, r25
 6a0:	d9 f3       	breq	.-10     	; 0x698 <__mulsf3+0x14>
 6a2:	55 23       	and	r21, r21
 6a4:	c9 f3       	breq	.-14     	; 0x698 <__mulsf3+0x14>
 6a6:	95 0f       	add	r25, r21
 6a8:	50 e0       	ldi	r21, 0x00	; 0
 6aa:	55 1f       	adc	r21, r21
 6ac:	aa 27       	eor	r26, r26
 6ae:	ee 27       	eor	r30, r30
 6b0:	ff 27       	eor	r31, r31
 6b2:	bb 27       	eor	r27, r27
 6b4:	00 24       	eor	r0, r0
 6b6:	08 94       	sec
 6b8:	67 95       	ror	r22
 6ba:	20 f4       	brcc	.+8      	; 0x6c4 <__mulsf3_pse+0x26>
 6bc:	e2 0f       	add	r30, r18
 6be:	f3 1f       	adc	r31, r19
 6c0:	b4 1f       	adc	r27, r20
 6c2:	0a 1e       	adc	r0, r26
 6c4:	22 0f       	add	r18, r18
 6c6:	33 1f       	adc	r19, r19
 6c8:	44 1f       	adc	r20, r20
 6ca:	aa 1f       	adc	r26, r26
 6cc:	66 95       	lsr	r22
 6ce:	a9 f7       	brne	.-22     	; 0x6ba <__mulsf3_pse+0x1c>
 6d0:	77 95       	ror	r23
 6d2:	30 f4       	brcc	.+12     	; 0x6e0 <__mulsf3_pse+0x42>
 6d4:	f3 0f       	add	r31, r19
 6d6:	b4 1f       	adc	r27, r20
 6d8:	0a 1e       	adc	r0, r26
 6da:	12 1e       	adc	r1, r18
 6dc:	08 f4       	brcc	.+2      	; 0x6e0 <__mulsf3_pse+0x42>
 6de:	63 95       	inc	r22
 6e0:	33 0f       	add	r19, r19
 6e2:	44 1f       	adc	r20, r20
 6e4:	aa 1f       	adc	r26, r26
 6e6:	22 1f       	adc	r18, r18
 6e8:	76 95       	lsr	r23
 6ea:	99 f7       	brne	.-26     	; 0x6d2 <__mulsf3_pse+0x34>
 6ec:	87 95       	ror	r24
 6ee:	20 f4       	brcc	.+8      	; 0x6f8 <__mulsf3_pse+0x5a>
 6f0:	b4 0f       	add	r27, r20
 6f2:	0a 1e       	adc	r0, r26
 6f4:	12 1e       	adc	r1, r18
 6f6:	63 1f       	adc	r22, r19
 6f8:	44 0f       	add	r20, r20
 6fa:	aa 1f       	adc	r26, r26
 6fc:	22 1f       	adc	r18, r18
 6fe:	33 1f       	adc	r19, r19
 700:	86 95       	lsr	r24
 702:	a9 f7       	brne	.-22     	; 0x6ee <__mulsf3_pse+0x50>
 704:	86 2f       	mov	r24, r22
 706:	71 2d       	mov	r23, r1
 708:	60 2d       	mov	r22, r0
 70a:	11 24       	eor	r1, r1
 70c:	9f 57       	subi	r25, 0x7F	; 127
 70e:	50 40       	sbci	r21, 0x00	; 0
 710:	8a f0       	brmi	.+34     	; 0x734 <__mulsf3_pse+0x96>
 712:	e1 f0       	breq	.+56     	; 0x74c <__mulsf3_pse+0xae>
 714:	88 23       	and	r24, r24
 716:	4a f0       	brmi	.+18     	; 0x72a <__mulsf3_pse+0x8c>
 718:	ee 0f       	add	r30, r30
 71a:	ff 1f       	adc	r31, r31
 71c:	bb 1f       	adc	r27, r27
 71e:	66 1f       	adc	r22, r22
 720:	77 1f       	adc	r23, r23
 722:	88 1f       	adc	r24, r24
 724:	91 50       	subi	r25, 0x01	; 1
 726:	50 40       	sbci	r21, 0x00	; 0
 728:	a9 f7       	brne	.-22     	; 0x714 <__mulsf3_pse+0x76>
 72a:	9e 3f       	cpi	r25, 0xFE	; 254
 72c:	51 05       	cpc	r21, r1
 72e:	70 f0       	brcs	.+28     	; 0x74c <__mulsf3_pse+0xae>
 730:	58 cf       	rjmp	.-336    	; 0x5e2 <__fp_inf>
 732:	a2 cf       	rjmp	.-188    	; 0x678 <__fp_szero>
 734:	5f 3f       	cpi	r21, 0xFF	; 255
 736:	ec f3       	brlt	.-6      	; 0x732 <__mulsf3_pse+0x94>
 738:	98 3e       	cpi	r25, 0xE8	; 232
 73a:	dc f3       	brlt	.-10     	; 0x732 <__mulsf3_pse+0x94>
 73c:	86 95       	lsr	r24
 73e:	77 95       	ror	r23
 740:	67 95       	ror	r22
 742:	b7 95       	ror	r27
 744:	f7 95       	ror	r31
 746:	e7 95       	ror	r30
 748:	9f 5f       	subi	r25, 0xFF	; 255
 74a:	c1 f7       	brne	.-16     	; 0x73c <__mulsf3_pse+0x9e>
 74c:	fe 2b       	or	r31, r30
 74e:	88 0f       	add	r24, r24
 750:	91 1d       	adc	r25, r1
 752:	96 95       	lsr	r25
 754:	87 95       	ror	r24
 756:	97 f9       	bld	r25, 7
 758:	08 95       	ret

0000075a <__udivmodhi4>:
 75a:	aa 1b       	sub	r26, r26
 75c:	bb 1b       	sub	r27, r27
 75e:	51 e1       	ldi	r21, 0x11	; 17
 760:	07 c0       	rjmp	.+14     	; 0x770 <__udivmodhi4_ep>

00000762 <__udivmodhi4_loop>:
 762:	aa 1f       	adc	r26, r26
 764:	bb 1f       	adc	r27, r27
 766:	a6 17       	cp	r26, r22
 768:	b7 07       	cpc	r27, r23
 76a:	10 f0       	brcs	.+4      	; 0x770 <__udivmodhi4_ep>
 76c:	a6 1b       	sub	r26, r22
 76e:	b7 0b       	sbc	r27, r23

00000770 <__udivmodhi4_ep>:
 770:	88 1f       	adc	r24, r24
 772:	99 1f       	adc	r25, r25
 774:	5a 95       	dec	r21
 776:	a9 f7       	brne	.-22     	; 0x762 <__udivmodhi4_loop>
 778:	80 95       	com	r24
 77a:	90 95       	com	r25
 77c:	bc 01       	movw	r22, r24
 77e:	cd 01       	movw	r24, r26
 780:	08 95       	ret

00000782 <__adddi3_s8>:
 782:	00 24       	eor	r0, r0
 784:	a7 fd       	sbrc	r26, 7
 786:	00 94       	com	r0
 788:	2a 0f       	add	r18, r26
 78a:	30 1d       	adc	r19, r0
 78c:	40 1d       	adc	r20, r0
 78e:	50 1d       	adc	r21, r0
 790:	60 1d       	adc	r22, r0
 792:	70 1d       	adc	r23, r0
 794:	80 1d       	adc	r24, r0
 796:	90 1d       	adc	r25, r0
 798:	08 95       	ret

0000079a <_exit>:
 79a:	f8 94       	cli

0000079c <__stop_program>:
 79c:	ff cf       	rjmp	.-2      	; 0x79c <__stop_program>
